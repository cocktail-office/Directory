{
    attributes = (
        {
            columnName = "BUR_ORDRE"; 
            externalType = NUMBER; 
            name = burOrdre; 
            valueClassName = NSNumber; 
            valueType = d; 
        }, 
        {
            allowsNull = Y; 
            columnName = "C_STRUCTURE"; 
            externalType = VARCHAR2; 
            name = cStructure; 
            valueClassName = NSString; 
            valueType = S; 
            width = 10; 
        }, 
        {
            columnName = "D_CREATION"; 
            externalType = DATE; 
            name = dCreation; 
            valueClassName = NSCalendarDate; 
            valueType = T; 
        }, 
        {
            columnName = "D_MODIFICATION"; 
            externalType = DATE; 
            name = dModification; 
            valueClassName = NSCalendarDate; 
            valueType = T; 
        }, 
        {
            columnName = "NO_INDIVIDU"; 
            externalType = NUMBER; 
            name = noIndividu; 
            valueClassName = NSNumber; 
            valueType = i; 
        }
    ); 
    attributesUsedForLocking = (burOrdre, noIndividu, dCreation, dModification, cStructure); 
    className = "org.cocktail.directory.eof.server.EORepartBureau"; 
    classProperties = (dCreation, dModification, cStructure, salle, structureUlr, individuUlr); 
    externalName = "REPART_BUREAU"; 
    fetchSpecificationDictionary = {}; 
    name = RepartBureau; 
    primaryKeyAttributes = (noIndividu, burOrdre); 
    relationships = (
        {
            destination = IndividuUlr; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = noIndividu; sourceAttribute = noIndividu; }); 
            name = individuUlr; 
        }, 
        {
            destination = Salles; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = salNumero; sourceAttribute = burOrdre; }); 
            name = salle; 
        }, 
        {
            destination = StructureUlr; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = cStructure; sourceAttribute = cStructure; }); 
            name = structureUlr; 
        }
    ); 
}
