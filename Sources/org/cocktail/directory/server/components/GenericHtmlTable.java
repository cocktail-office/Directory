package org.cocktail.directory.server.components;

// Generated by the WOLips Templateengine Plug-in at 19 d�c. 2006 16:59:11

import org.cocktail.directory.impl.Directory;
import org.cocktail.directory.impl.elements.DirectoryEntity;
import org.cocktail.directory.impl.elements.FieldItem;
import org.cocktail.directory.impl.elements.LinkFieldItem;
import org.cocktail.directory.impl.pathways.Pathway;
import org.cocktail.directory.server.NavigationInfos;
import org.cocktail.directory.server.Session;
import org.cocktail.directory.tools.DirUtilities;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableDictionary;



public class GenericHtmlTable extends WOComponent {

	// bindings
	public String cssClsTable,cssOddRow,cssEvenRow;
	public NSArray listObjects;
	public NSArray fields;
	private boolean useHyperLink = false;
	public Directory directory;
	public Pathway pathway = null;
	public String typeRequestItem;
	//public boolean searchMode = false;
	
	// other fields
	public FieldItem currentFieldForValue,currentField;
	public Object currentObject,currentObjectInArray;
	public int objIndex;
	
	Session session;
	
    public GenericHtmlTable(WOContext context) {
        super(context);
        session = (Session)session();
    }
    
    public boolean isCurrentFieldAList() {
    	return currentFieldForValue.isList();
    }

    public boolean isSpeLink() {
    	return currentFieldForValue.isLink() && (currentFieldForValue instanceof LinkFieldItem) 
    	&& ((LinkFieldItem)currentFieldForValue).getLinkType()!=LinkFieldItem.MAILTO_LINK;
    }
    
    public boolean isMailtoLink() {
    	return (currentFieldForValue instanceof LinkFieldItem) 
    			&& (((LinkFieldItem)currentFieldForValue).getLinkType()==LinkFieldItem.MAILTO_LINK);
    }
    
    public boolean fieldHasTooltip() {
    	return currentFieldForValue.getTooltipId()!=null;
    }
    
    public String valueForField() {
    	Object val = DirUtilities.invokeMethod(currentObject,currentFieldForValue.getId());
    	if(val!=null)
    		return val.toString();
    	else
    		return null;
    }
    
    public String tdOnMouseOver() {
    	if(fieldHasTooltip()) {
	    	StringBuffer bf = new StringBuffer();
	    	bf.append( "return overlib('").append( valueForFieldTooltip() ).append("');" );
	    	return bf.toString();
    	}
    	else {
    		return null;
    	}
    }
    
    
    public String specificLinkValue() {
    	Object val = valueForField();
    	String disp = null;
    	LinkFieldItem linkFld = (LinkFieldItem)currentFieldForValue;
    	
    	if(linkFld.isLinkTitleALocalizedString()) {
    		disp = session.getLocalizedString( linkFld.getLinkLabelLocId() );
    	}
    	else
    	if(linkFld.isLinkTitleAGlobalLocalizedString()) {
    		disp = session.getLocalizedString(linkFld.getLocalizationId());
    	}	
    	else {
    		disp = (String)DirUtilities.invokeMethod(currentObject,linkFld.getLinkValueId(),null,null);
    	}
    	
    	if(val!=null && disp!=null) {
    		String str = ((LinkFieldItem)currentFieldForValue).prepareLink((String)val,disp);
    		return str;
    	}
    	else
    		return null;
    }
    
    
    public NSArray arrayValueForField() {
    	Object[] args = currentFieldForValue.getAdditionalParameters();
    	Class[] types = currentFieldForValue.getTypeParameters();
    	return (NSArray)DirUtilities.invokeMethod(
    					currentObject,
    					currentFieldForValue.getId(),
    					args,
    					types
    					);
    }
    
    public String valueCurrentObjectInArray() {
    	return currentObjectInArray.toString();
    }
    
   public String valueForFieldTooltip() {
		Object val = DirUtilities.invokeMethod(currentObject,currentFieldForValue.getTooltipId());
		if(val!=null)
			return (val.toString()).replaceAll("'", "`").replaceAll("\n","<br/>").replaceAll("\"", "`");
		else
			return null;
   }
    
    public String getLocalizedHeader() {
    	return session.getLocalizedString(currentField.getLocalizationId());
    }
    
    
    public NSDictionary queryParameters() {
    	NSMutableDictionary dico = new NSMutableDictionary();
    	
    	//TODO : � affiner -> Modifications sur le type d'annuaire 
    	if(pathway!=null/* && !searchMode*/) {
    		dico.setObjectForKey(pathway.getId(),NavigationInfos.REQ_PATHWAY);
    	}
    	dico.setObjectForKey(directory.getId(),NavigationInfos.REQ_DIRECTORY);
    	dico.setObjectForKey(((DirectoryEntity)currentObject).getPrimaryKey(),typeRequestItem);
    	return dico;
    }
    
    
    // g�rer le cas ou l'on souhaite alterner les couleurs des lignes.
    public String getClassForCurrentIndex() {
    	String cssClass = null;
    	switch(objIndex%2) {
    	case 0 :
    		default :
    			cssClass = cssEvenRow;
    		break;
    		case 1 :
    			cssClass = cssOddRow;
    		break;
    	}
    	return cssClass;
    }

	public boolean isUseHyperLink() {
		if(currentFieldForValue!=null)
			return useHyperLink && !currentFieldForValue.isLink();
		else
			return useHyperLink;
	}

	public void setUseHyperLink(boolean useHyperLink) {
		this.useHyperLink = useHyperLink;
	}
	
	public boolean dontUseHyperLink() {
		return !useHyperLink && !currentFieldForValue.isLink();
	}

	
	
	
    public boolean synchronizesVariablesWithBindings() {
    	return true;
    }

    public boolean isStateless() {
    	return false;
    }
}