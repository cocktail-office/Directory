package org.cocktail.directory.server.components;

// Generated by the WOLips Templateengine Plug-in at 7 dï¿½c. 2006 14:50:31

import org.cocktail.directory.impl.Directory;
import org.cocktail.directory.impl.elements.DirectoryEntity;
import org.cocktail.directory.impl.pathways.Pathway;
import org.cocktail.directory.server.NavigationInfos;
import org.cocktail.directory.server.Session;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WODisplayGroup;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableDictionary;



public class DirectoryBrowser extends WOComponent {
	
	
	public Session session;
	
	public DirectoryEntity currentItem;
	//NSArray listItems;
	
	private Directory directory;
	public Pathway pathway;
	public DirectoryEntity parentObject;
	public WODisplayGroup displayGroup;
	public int typeView;
	public int level;
	public String typeRequestItem;
	// pour le cas particulier des personne_alias
	public NSArray alternSummaryFieldsForMembers;
	
	public DirectoryEntity rootRecord;
	public NSArray listRootRecords;
	
    public DirectoryBrowser(WOContext context) {
        super(context);
        session = (Session)session();
    }
    
    public boolean shouldDiplayHierarchicallyForDirStart() {
		return typeView==NavigationInfos.VIEW_HIERARCHICALLY_FOR_DIRECTORY_START;
	}
     
     public boolean shouldDisplayTree() {
    	 return pathway.dataListTypeFirstLevel()==Pathway.HIERARCHICAL_LIST;
     }
     
     public boolean shouldDisplayList() {
    	 return pathway.dataListTypeFirstLevel()==Pathway.SIMPLE_LIST;
     }

     public boolean shouldDisplayTable() {
    	 return pathway.dataListTypeFirstLevel()==Pathway.TABULAR_LIST;
     }
     

    
    public boolean shouldDisplayForDirStart() {
		return typeView==NavigationInfos.VIEW_FOR_DIRECTORY_START;
	}

	public boolean shouldDisplayForParentItem() {
    	return typeView==NavigationInfos.VIEW_FOR_PARENT_ITEM;
    }
    
    public boolean shouldDisplayHierarchicallyForParentItem() {
    	return typeView==NavigationInfos.VIEW_HIERARCHICALLY_FOR_PARENT_ITEM;
    }
    
 	public DirectoryEntity getCurrentItem() {
		return currentItem;
	}

	public void setCurrentItem(DirectoryEntity currentItem) {
		this.currentItem = currentItem;
	}

	public NSDictionary queryParameters() {
		NSMutableDictionary dico = new NSMutableDictionary();
		dico.setObjectForKey(directory.getId(),NavigationInfos.REQ_DIRECTORY);
		dico.setObjectForKey(pathway.getId(),NavigationInfos.REQ_PATHWAY);
		dico.setObjectForKey(currentItem.getPrimaryKey(),typeRequestItem/*DirectAction.REQ_PARENT_ITEM*/);
		return dico;
	}

	public String linkSummaryBrowserLabel() {
		return session.getLocalizedString("LDispStudents");
	}
	
	public NSDictionary queryWithParentItem() {
		NSMutableDictionary dico = new NSMutableDictionary();
		if(currentItem!=null) {
			dico.setObjectForKey(directory.getId(),NavigationInfos.REQ_DIRECTORY);
			dico.setObjectForKey(pathway.getId(),NavigationInfos.REQ_PATHWAY);
			dico.setObjectForKey(currentItem.getPrimaryKey(),NavigationInfos.REQ_PARENT_ITEM);
		}
		return dico;
	}
	
	public Directory getDirectory() {
		return directory;
	}

	public void setDirectory(Directory directory) {
		this.directory = directory;
	}
	
	public NSArray getSummaryFields() {
		return pathway.getSummaryFieldsForLevel(level);
	}


}