package org.cocktail.directory.server.components;

// Generated by the WOLips Templateengine Plug-in at 7 d�c. 2006 09:39:53

import java.util.Iterator;

import org.cocktail.directory.eof.server.EOAccordsContrat;
import org.cocktail.directory.eof.server.EOAccordsTypeContrat;
import org.cocktail.directory.eof.server.EOIndividuUlr;
import org.cocktail.directory.eof.server.EOStructureUlr;
import org.cocktail.directory.eof.server.EOTypeGroupe;
import org.cocktail.directory.impl.Directory;
import org.cocktail.directory.impl.SearchItem;
import org.cocktail.directory.impl.elements.DirectoryEntity;
import org.cocktail.directory.impl.pathways.Pathway;
import org.cocktail.directory.server.CommonDataHolder;
import org.cocktail.directory.server.DirElementNotFoundException;
import org.cocktail.directory.server.DirectAction;
import org.cocktail.directory.server.NavigationInfos;
import org.cocktail.directory.server.Session;
import org.cocktail.directory.tools.CLog;
import org.cocktail.directory.tools.DirUtilities;
import org.cocktail.directory.tools.LocaleRepresentation;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WORedirect;
import com.webobjects.appserver.WORequest;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;
import com.webobjects.foundation.NSTimestamp;

import er.extensions.appserver.ERXDisplayGroup;

public class Main extends GenericComponent {

	public EOStructureUlr currentService;
	private Directory directory;
	private Pathway pathway;
	private String parentItem;
	private String specificItem;
	private int displayMode;

	private boolean standalone = false;

	private String typeRequestItem = NavigationInfos.REQ_PARENT_ITEM;

	public ERXDisplayGroup displayGroup;
	public DirectoryEntity parentObject;
	public int level = 0;

	public int searchFieldNum;
	public SearchItem currentSearchItem;

	// simple search
	public String searchString;
	public NSDictionary simpleSearchParams;
	public DirectoryEntity rootRecord;
	public DirectoryEntity selectedNode;

	public NSMutableArray listRootRecords;

	public LocaleRepresentation currentLocale;

	public NSArray alternSummaryFieldsForMembers;

	public boolean showInsufficientPrivilegesMsg = false;
	// public boolean showInstruct;

	private NSMutableDictionary fieldsSearch;

	public Main(WOContext context) {
		super(context);
		session = (Session) session();
		listRootRecords = new NSMutableArray();
		displayMode = NavigationInfos.DISPLAY_START_PAGE; // valeur par defaut.
		showInsufficientPrivilegesMsg = false;
	}

	public boolean isShouldDisplayDirectoryListing() {
		return displayMode == NavigationInfos.DISPLAY_START_PAGE;
	}

	public String searchStringName() {
		return "searchString".concat(String.valueOf(searchFieldNum));
	}

	// public boolean isStateless() {
	// return false;
	// }

	public boolean isShouldDisplayDirectoryBrowser() {
		return displayMode == NavigationInfos.DISPLAY_BROWSING;
	}

	public boolean isShouldDisplayDetails() {
		return displayMode == NavigationInfos.DISPLAY_DETAILS;
	}

	public boolean isShouldDisplaySimpleSearchResults() {
		return displayMode == NavigationInfos.DISPLAY_SIMPLE_SEARCH;
	}

	// On peut faire une recherche si un annuaire precis est en cours de consultation.
	public boolean isCanSearch() {
		return directory != null;
	}

	public void prepareBrowsableItems() {

		listRootRecords.removeAllObjects();

		NSArray objects = new NSArray();
		String dirId = directory.getId();

		EOSortOrdering sort = null;

		if (dirId.equals(CommonDataHolder.DIR_EMPLOYEES)) {
			typeRequestItem = NavigationInfos.REQ_PARENT_ITEM;

			for (int i = 0; i < CommonDataHolder.cStructuresRoot.count(); i++) {
				rootRecord = EOStructureUlr.fetchObjectWithId(session.defaultEditingContext(),
						(String) CommonDataHolder.cStructuresRoot.objectAtIndex(i));

				if (rootRecord != null) {
					listRootRecords.addObject(rootRecord);
				}
			}
		}
		else
			if (dirId.equals(CommonDataHolder.DIR_MARKETS)) {
				typeRequestItem = NavigationInfos.REQ_PARENT_ITEM;

			}
			else
				if (dirId.equals(CommonDataHolder.DIR_STUDENTS)) {
					String pathId = pathway.getId();

					if (pathId.equals("path_els")) {
						objects = EOUtilities.objectsWithFetchSpecificationAndBindings(session.defaultEditingContext(), pathway.getMainEntity(),
								pathway.getFetchSpecName(), null);
					}
					else
						if (pathId.equals("path_diploma")) {
							rootRecord = EOStructureUlr.fetchObjectWithId(session.defaultEditingContext(), CommonDataHolder.cStructureRootDiploma);
							listRootRecords.addObject(rootRecord);
						}
				}
				else
					if (dirId.equals(CommonDataHolder.DIR_SUPPLIERS)) {
						typeRequestItem = NavigationInfos.REQ_SPECIFIC_ITEM;

						// en attendant de gerer les clients, fournisseurs et clients-fournisseurs...
						objects = EOUtilities.objectsWithFetchSpecificationAndBindings(session.defaultEditingContext(), directory.getMainEntity(),
								pathway.getFetchSpecName(), null);
						sort = EOSortOrdering.sortOrderingWithKey("adrNom", EOSortOrdering.CompareAscending);

					}

					else
						if (dirId.equals(CommonDataHolder.DIR_GROUPS)) {
							typeRequestItem = NavigationInfos.REQ_PARENT_ITEM;

							objects = EOTypeGroupe.fetchAll(session.defaultEditingContext(), "tgrpTemWeb", "O", null);
						}

						else
							if (dirId.equals(CommonDataHolder.DIR_CONVENTIONS)) {
								typeRequestItem = NavigationInfos.REQ_PARENT_ITEM;
								// ici on prend l'objet racine pour
								if (pathway.getId().equals("path_typct")) {
									rootRecord = EOAccordsTypeContrat.fetchRootRecord(session.defaultEditingContext());
									listRootRecords.addObject(rootRecord);
								}
							}

		displayGroup = DirUtilities.createDisplayGroup(session().defaultEditingContext(), directory.getMainEntity(), 20);

		if (sort != null) {
			displayGroup.setSortOrderings(new NSArray(sort));
		}
		displayGroup.setObjectArray(objects);

		System.out.println("listRootRecords.count:" + listRootRecords.count());

	}

	// quel type d'affichage : fonction de la nature des donn�es et du niveau de detail.
	// TODO : Rendre parametrable dans le Directory le type d'affichage determin� ci-dessous.
	public int typeViewForDirBrowser() {
		int typeView = 0;
		String dirId = directory.getId();
		switch (displayMode) {
		case NavigationInfos.DISPLAY_BROWSING:

			if (dirId.equals(CommonDataHolder.DIR_EMPLOYEES) || dirId.equals(CommonDataHolder.DIR_GROUPS)
					|| dirId.equals(CommonDataHolder.DIR_STUDENTS) || dirId.equals(CommonDataHolder.DIR_CONVENTIONS)) {
				if (this.parentItem == null) {
					typeView = NavigationInfos.VIEW_FOR_DIRECTORY_START;
				}
				else {
					typeView = NavigationInfos.VIEW_FOR_PARENT_ITEM;
				}
			}

			if (dirId.equals(CommonDataHolder.DIR_SUPPLIERS)) {
				if (this.parentItem == null) {
					typeView = NavigationInfos.VIEW_FOR_DIRECTORY_START;
				}
				else {
					typeView = NavigationInfos.VIEW_FOR_PARENT_ITEM;
				}
			}

			if (dirId.equals(CommonDataHolder.DIR_GROUPS)) {
				if (this.parentItem == null) {
					typeView = NavigationInfos.VIEW_FOR_DIRECTORY_START;
				}
				else {
					typeView = NavigationInfos.VIEW_FOR_PARENT_ITEM;
				}
			}

			break;
		}

		return typeView;
	}

	public Directory getDirectory() {
		return directory;
	}

	public void setDirectory(Directory directory) {
		this.directory = directory;
	}

	public int getDisplayMode() {
		return displayMode;
	}

	private void setParentItemDirectoryConventions(String pi) throws DirElementNotFoundException {
		parentObject = pathway.fetchParentObjectWithId(session.defaultEditingContext(), parentItem);
		NSMutableDictionary args = new NSMutableDictionary();
		args.setObjectForKey(new NSTimestamp(), "now");
		args.setObjectForKey(new Integer(parentItem), "typeId");

		EOIndividuUlr user = session.connectedIndividu();
		boolean canView = false;

		if (pathway.needsAuthentication()) {
			if (user != null && user.canViewListeRouge()) {
				canView = true;
			}
		}
		else {
			canView = true;
		}

		NSArray results;
		if (canView) {
			results = EOUtilities.objectsWithFetchSpecificationAndBindings(session.defaultEditingContext(), "AccordsContrat", "contratsPourType",
					args);
		}
		else {
			results = new NSArray();
			if (!canView) {
				CLog.logInfo(user.displayString() + " ne peut pas voir les conventions (pas le bon type de population dans Grhum ?)");
			}
		}

		String entityNameForDisplayGroup = "AccordsContrat";

		displayGroup = DirUtilities.createDisplayGroup(session().defaultEditingContext(), entityNameForDisplayGroup, 20);

		displayGroup.setSortOrderings(new NSArray(new Object[] { EOAccordsContrat.SORT_YEAR, EOAccordsContrat.SORT_OBJC }));
		displayGroup.setObjectArray(results);
	}

	// PARENT ITEM : List or TreeControl
	public void setParentItem(String parentItem) throws DirElementNotFoundException {

		this.parentItem = parentItem;
		String dirId = directory.getId();

		if (parentItem != null) {

			if (dirId.equals(CommonDataHolder.DIR_EMPLOYEES)) {
				setParentItemDirectoryEmployees(parentItem);
			}
			else
				if (dirId.equals(CommonDataHolder.DIR_GROUPS)) {
					setParentItemDirectoryGroups(parentItem);
				}
				else
					if (dirId.equals(CommonDataHolder.DIR_STUDENTS)) {
						setParentItemDirectoryStudents(parentItem);
					}
					else
						if (dirId.equals(CommonDataHolder.DIR_CONVENTIONS)) {
							setParentItemDirectoryConventions(parentItem);
						}

		}
	}

	public void setDisplayMode(int displayMode) {
		this.displayMode = displayMode;
	}

	public Pathway getPathway() {
		return pathway;
	}

	public void setPathway(Pathway pathway) {
		this.pathway = pathway;
	}

	public String getParentItem() {
		return parentItem;
	}

	private void setParentItemDirectoryGroups(String pi) throws DirElementNotFoundException {

		parentObject = (DirectoryEntity) DirUtilities.fetchUniqueData(session.defaultEditingContext(), "TypeGroupe", "tgrpCode", parentItem);

		if (parentObject == null) {
			throw new DirElementNotFoundException(session, directory, pathway, parentItem);
		}

		boolean canView = true;

		if (pathway.needsAuthentication()) {
			canView = session.canViewResults(directory);
		}

		EOIndividuUlr user = session.connectedIndividu();

		NSArray results;
		if (canView) {
			String codeType = ((EOTypeGroupe) parentObject).tgrpCode();
			if (codeType.equals(EOTypeGroupe.TGRP_CODE_FORUM)) {
				results = EOUtilities.objectsWithFetchSpecificationAndBindings(session.defaultEditingContext(), "StructureUlr", "listMailingLists",
						null);
			}
			else {
				results = EOUtilities.objectsWithFetchSpecificationAndBindings(session.defaultEditingContext(), "StructureUlr",
						"listMailGroupsForTypeGroupe", new NSDictionary(parentItem, "tgrpCode"));
			}
		}
		else {
			results = new NSArray();
			if (!canView) {
				String msg = user.displayString() + " ne peut pas voir les groupes de messagerie (pas le bon type de population dans Grhum!)";
				CLog.logInfo(msg);
				throw new DirElementNotFoundException(msg);
			}

		}

		displayGroup = DirUtilities.createDisplayGroup(session().defaultEditingContext(), "StructureUlr", 20);

		displayGroup.setObjectArray(results);
	}

	private void setParentItemDirectoryEmployees(String pi) throws DirElementNotFoundException {

		parentObject = (DirectoryEntity) DirUtilities.fetchUniqueData(session.defaultEditingContext(), "StructureUlr", "cStructure", parentItem);

		if (parentObject == null) {
			throw new DirElementNotFoundException(session, directory, pathway, parentItem);
		}

		EOIndividuUlr user = session.connectedIndividu();

		boolean lr = false;
		if (user != null && user.canViewListeRouge()) {
			lr = true;
		}

		NSArray results = EOUtilities.objectsWithFetchSpecificationAndBindings(session.defaultEditingContext(), "IndividuUlr",
				lr ? "individusListeRougeForStructure" : "individusForStructure", new NSDictionary(parentItem, "parentItem"));

		String entityNameForDisplayGroup = "IndividuUlr";
		EOSortOrdering sortOrder = EOSortOrdering.sortOrderingWithKey("nomUsuel", EOSortOrdering.CompareAscending);
		displayGroup = DirUtilities.createDisplayGroup(session().defaultEditingContext(), entityNameForDisplayGroup, 20);

		if (sortOrder != null) {
			displayGroup.setSortOrderings(new NSArray(sortOrder));
		}

		displayGroup.setObjectArray(results);
	}

	private void setParentItemDirectoryStudents(String pi) throws DirElementNotFoundException {
		parentObject = (DirectoryEntity) DirUtilities.fetchUniqueData(session.defaultEditingContext(), "StructureUlr", "cStructure", parentItem);

		if (parentObject == null) {
			throw new DirElementNotFoundException(session, directory, pathway, parentItem);
		}

		EOIndividuUlr user = session.connectedIndividu();

		boolean lr = false;
		if (user != null && user.canViewListeRouge()) {
			lr = true;
		}

		NSArray results = EOUtilities.objectsWithFetchSpecificationAndBindings(session.defaultEditingContext(), "IndividuUlr",
		// lr ? "individusListeRougeForStructure" : "etudiantsForStructure", //Ne pas utiliser individusListeRougeForStructure reservé aux
		// personnels
				"etudiantsForStructure", new NSDictionary(parentItem, "parentItem"));

		CLog.log("setParentItemDirectoryStudents : " + results.count());

		String entityNameForDisplayGroup = "IndividuUlr";
		EOSortOrdering sortOrder = EOSortOrdering.sortOrderingWithKey("nomUsuel", EOSortOrdering.CompareAscending);
		displayGroup = DirUtilities.createDisplayGroup(session().defaultEditingContext(), entityNameForDisplayGroup, 20);

		if (sortOrder != null) {
			displayGroup.setSortOrderings(new NSArray(sortOrder));
		}

		displayGroup.setObjectArray(results);
	}

	public String getSpecificItem() {
		return specificItem;
	}

	public void setSpecificItem(String specificItem) {
		this.specificItem = specificItem;
	}

	public boolean shouldDispSearch() {
		boolean global = application.enableGlobalSearch();
		boolean dispSearch = global || (directory != null);
		return dispSearch;
	}

	public boolean isShowInstruct() {
		return !shouldDispSearch();
	}

	public void manageNavigationBar() {

		if (displayMode == NavigationInfos.DISPLAY_START_PAGE) {
			session.navInfosHolder.removeAllPathsAfterIndex(0);
			return;
		}

		String localizationId = null;
		String displayString = null;
		String directAction = null;
		NSMutableDictionary dico = new NSMutableDictionary();

		// pas d'ajout dans la barre de navigation -> on est au dernier niveau d'affichage.
		if (specificItem != null) {
			level = 3;
			return;
		}

		// il y'a un object parent dont on visualise les fils (ex : Structure->Membres)
		if (parentObject != null) {
			displayString = parentObject.displayString();
			dico.setObjectForKey(this.parentItem, NavigationInfos.REQ_PARENT_ITEM);
			level = 2;
		}
		// Sinon c'est juste un chemin g�n�rique (ex : parcourir par diplome)
		if (pathway != null) {
			localizationId = pathway.getLocalizationId();
			dico.setObjectForKey(pathway.getId(), NavigationInfos.REQ_PATHWAY);

		}

		if (pathway != null && parentObject == null) {
			level = 1;
		}

		directAction = directory.getWoDirActionName();
		dico.setObjectForKey(directory.getId(), NavigationInfos.REQ_DIRECTORY);

		session.navInfosHolder.createNewPath(localizationId, displayString, level, directAction, dico);
	}

	/** retourne le dictionnaire des parametres de la recherche simple : cf DirectAction.searchAction */
	public NSMutableDictionary<String, String> getQuerySearchDico() {

		NSMutableDictionary<String, String> querySearchDico = new NSMutableDictionary<String, String>();
		if (directory != null) {
			querySearchDico.setObjectForKey(directory.getId(), NavigationInfos.REQ_DIRECTORY);
			if (pathway != null) {
				querySearchDico.setObjectForKey(pathway.getId(), NavigationInfos.REQ_PATHWAY);
			}
		}
		return querySearchDico;
	}

	public WOComponent changeLocale() {
		session.manageLanguages(session.navInfosHolder.selectedLocale.getValue());
		return null;
	}

	public void setSearchSimpleSearchParameters(NSDictionary dico) {
		simpleSearchParams = dico;
	}

	/** directories to display by DirectoryListing component */
	public NSArray directories() {
		if (directory != null) {
			return new NSArray(directory);
		}
		else {
			return application.listDirectories;
		}
	}

	public String directoryName() {
		if (directory != null) {
			return session.getLocalizedString(directory.localeIdForTitle());
		}
		else {
			return null;
		}
	}

	/** WOComponent to be used to display details of an item. */
	public String getCompName() {
		String comp = null;
		if (directory != null) {
			comp = directory.componentNameForDetails();
		}
		return comp;
	}

	public String getTypeRequestItem() {
		return typeRequestItem;
	}

	public void setTypeRequestItem(String typeRequestItem) {
		this.typeRequestItem = typeRequestItem;
	}

	public String getLinkConnectClass() {
		return session.connectedIndividu() == null ? "login" : "logout";
	}

	public String linkConnectLabel() {
		if (session.connectedIndividu() == null) {
			return session.getLocalizedString("TLogin");
		}
		else {
			return session.getLocalizedString("TLogout");
		}
	}

	public WOComponent connect() {
		String action = null;
		if (session.connectedIndividu() == null) {
			action = "casLogin";
		}
		else {
			action = "default";
			session.setConnectedUser(null);
			session.setConnectedIndividu(null);
			session.terminate();
		}
		session = (Session) session();
		session.setObjectForKey(session.getDirectoryRequest(), DirectAction.URL);
		String url = context().directActionURLForActionNamed(action, null);
		WORedirect redirect = new WORedirect(context());
		redirect.setUrl(url);
		return redirect;

	}

	// not used
	public String tooltipConnect() {
		StringBuffer bf = new StringBuffer();
		bf.append("return overlib('").append(session.getLocalizedString("LDescConnect")).append("');").append("\" ").append("onmouseout=")
				.append("'return nd();'");

		return bf.toString();

	}

	public boolean isMailReaction() {
		return (application.mailReaction() != null && !application.mailReaction().equals(""));
	}

	public boolean isStandalone() {
		return standalone;
	}

	public void setStandalone(boolean stdl) {
		this.standalone = stdl;
	}

	public void awake() {
		session.firstTimeInitLocale();
	}

	public void sleep() {
		super.sleep();
	}

	public WOActionResults processSearch() {

		WORequest request = context().request();
		NSMutableDictionary<String, Object> dico = new NSMutableDictionary<String, Object>();
		@SuppressWarnings("unchecked")
		NSArray<String> keys = request.formValueKeys();

		Iterator<String> keysIterator = keys.iterator();
		boolean atLeastOneFieldComplete = false;
		String key = null;
		String value = null;
		while (keysIterator.hasNext()) {
			key = keysIterator.next();
			value = (String) request.formValueForKey(key);

			if (value != null && !value.trim().equals("")) {
				value = value.replaceAll("\\*", "");

				if (value.length() >= CommonDataHolder.minCaracteresRecherche) {
					atLeastOneFieldComplete = true;
				}

				dico.setObjectForKey(value, key);
			}
		}

		if (!atLeastOneFieldComplete) {
			String message = session.getLocalizedString("ErrMinCharsRecherche");
			message = message.replaceAll("%NB%", String.valueOf(CommonDataHolder.minCaracteresRecherche));
			setErrorMessage(message);
			return null;
		}

		if (dico.count() == 0) {
			return null;
		}

		NSDictionary<String, String> qsd = getQuerySearchDico();
		dico.addEntriesFromDictionary(qsd);

		String url = context().directActionURLForActionNamed("search", dico);
		url = url.replaceAll("&amp;", "&");
		WORedirect redirect = new WORedirect(context());
		redirect.setUrl(url);
		return redirect;
	}

}