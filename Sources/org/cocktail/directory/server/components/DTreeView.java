package org.cocktail.directory.server.components;

//Generated by the WOLips Templateengine Plug-in at 30 nov. 2006 10:42:32

import org.cocktail.directory.impl.Directory;
import org.cocktail.directory.impl.elements.DirectoryEntity;
import org.cocktail.directory.impl.pathways.Pathway;
import org.cocktail.directory.server.NavigationInfos;
import org.cocktail.directory.server.Session;
import org.cocktail.directory.tools.DirUtilities;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSKeyValueCoding;
import com.webobjects.foundation.NSMutableDictionary;



public class DTreeView extends WOComponent {

	
	private static final long serialVersionUID = 3268889259351443863L;
	
	public Directory directory;
	public Pathway pathway;
	public String typeRequestItem;
	
	//private static final String IMG_OPENED 	= "opened.gif";
	//private static final String IMG_CLOSED	= "closed.gif";
	
	private static final String IMG_OPENED 	= "down.gif";
	private static final String IMG_CLOSED	= "right.gif";
	
	
	// EOGenericRecord currentRecord = racine de l'arborescence
	private DirectoryEntity currentRecord = null;
	// les fils de currentRecord : (NSArray)currentRecord.valueForKey("sonsKey")
	private String sonsKey = null;
	// libelKey : permet d'afficher (String)currentRecord.valueForKey("libelKey")
	private String libelKey = null;
	// selectionKey : passage de la selection a la page courante :
	// context().page().takeValueForKey( currentRecord, "selectionKey");
	private String selectionKey;
	// Nombre de niveau a ouvrir initialement
	// openLevel = -1 : tout fermer; 0, 1, 2 ... : ouvrir jusqu'a la racine, jusqu'au 1er niveau ou le 2eme, etc. 
	private int openLevel = 0;
	// Couleur de la font du libelle du noeud selectionne 
	private String selectionTextColor;
	
	// 
	// FIN - variables de binding sur le composant
	//
	
	// Niveau en cours dans la hierarchie
	private int level = 0;

	// Le tableau des fils
	private NSArray sons = null;

	// variables locales
	public DirectoryEntity eog;	// Parcours du tableau sons() 
	
	// Controle de l'ouverture du noeud
	private boolean isNodeOpen = false;
	private Boolean isNodeInitialized = null;

	// Ancre pour se positionner au niveau du noeud selectionne dans DTreeView
	private String anchor;
	
	public DTreeView(WOContext context) {
		super(context);
		sons = null;
	}

	//
	// DEBUT - Binding sur le composant
	//

	/**
	 *	Attribut de l'EOGenericRecord representant le libelle a afficher
	 */
	public void setLibelKey( String value) {
		libelKey = value;
	}

	public String libelKey() {
		if ( (libelKey == null) && (this.hasBinding("libelKey")) )
			libelKey = (String)valueForBinding("libelKey");
		return  libelKey;
	}

	/**
	 *	La racine courante du treeView
	 */
	public void setCurrentRecord( DirectoryEntity value) {
		currentRecord = value;
	}

	public DirectoryEntity currentRecord() {
		if ( (currentRecord == null) && (this.hasBinding("currentRecord")) )
			currentRecord = (DirectoryEntity)valueForBinding("currentRecord");
		return currentRecord;
	}

	/**
	 *	L'attribue de EOGenericRecord representant la relation vers les fils
	 */
	public void setSonsKey( String value) {
		sonsKey = value;
	}

	public String sonsKey() {
		if ( (sonsKey == null) && (this.hasBinding("sonsKey")) )
			sonsKey = (String)valueForBinding("sonsKey");
		return  sonsKey;
	}

	/** 
	 * 	selectionKey : passage de la selection a la page courante :
	 *  context().page().takeValueForKey( currentRecord, "selectionKey");
	 */
	public String selectionKey() {
		if ( (selectionKey == null) && (this.hasBinding("selectionKey")) )
			selectionKey = (String)valueForBinding("selectionKey");
		return selectionKey;
	}

	public void setSelectionKey( String value) {
		selectionKey = value;
	}
	
	/**
	 *	Couleur du texte du libelle du noeud selectionne
	 */
	public String selectionTextColor() {
		if ( (selectionTextColor == null) && (this.hasBinding("selectionTextColor")) )
			selectionTextColor = (String)valueForBinding("selectionTextColor");
		return selectionTextColor;
	}
	
	public void setSelectionTextColor( String value) {
		selectionTextColor = value;
	}
	
	/**
	 * Nombre de niveau a ouvrir initialement
	 * -1 : tout ouvrir, 0 : tout fermer; 1, 2 ... : ouvrir le 1er niveau (racine) ou le 2eme, etc. 
	 */
	public int openLevel() {
		return openLevel;
	}
	
	public void setOpenLevel( int value) {
		openLevel = value;
	}
	
	//
	// FIN - Binding sur le composant
	//

	/**
	 * Niveau en cours dans la hierarchie :
	 * Ce binding sur le composant dans la page du context, n'est pas obligatoire (au niveau racine).
	 * On le genere automatiquement sur les niveaux hierarchiques suivants.
	 */
	public int level() {
		return level;
	}
	
	public void setLevel( int value) {
		level = value;
	}

	public int nextLevel() {
		return (level() + 1);
	}

	/**
	 *	Image du folder ouvert ou ferme :
	 */
	public String icon() {
		return isNodeOpen() ? IMG_OPENED : IMG_CLOSED;
	}

	/**
	 *	Libelle de la racine courante
	 */
	public String valueNode() {
		String str = null;
		if ( currentRecord() != null) {
			str = (String)DirUtilities.invokeMethod(currentRecord,libelKey());
		}
		return str;
	}

	/**
	 *	Les fils de la racine courante
	 */
	public NSArray sons() {
		sons = null;
		if ((currentRecord() != null) && (sonsKey() != null) ) {
			Object obj = ((NSKeyValueCoding)currentRecord()).valueForKey(sonsKey());
			if ( obj != null) {
				NSArray array = (NSArray)obj;
				// TODO : Exception null par array.count()
				try {
					if ( (array != null) && (array.count() > 0) )
						sons = array;
				} catch (Exception e) {
				}
			}
		}
		return sons;
	}


	
	public WOComponent selectNode() {
		isNodeOpen = ! isNodeOpen;
		if ( currentRecord() != null) {
			WOComponent page = context().page();
			if (  (page != null) && (selectionKey() != null) ) {
				if ( selectionKey() != null)
					page.takeValueForKey( currentRecord, selectionKey);
			}
		}
		return null;
	}
	
	
	public boolean isNodeOpen() {
		// Initialisation de l'ouverture du noeud
		if ( isNodeInitialized == null) {
			// openLevel = -1 : tout fermer; 0, 1, 2 ... : ouvrir jusqu'a la racine, jusqu'au 1er niveau ou le 2eme, etc.
			isNodeOpen = (openLevel() >= level());
			isNodeInitialized = new Boolean(true);
		}
		
		return isNodeOpen;
	}

	public boolean isViewSons() {
		return ( isNodeOpen && (sons() != null) && (sons().count() > 0));
	}
	
	/**
 	 *	Sert pour l'ancre pour se positionner au niveau du noeud 
	 *	selectionne dans DTreeView
	 */
	public String getAnchor() {
		if ( currentRecord() != null ) {
			int id = currentRecord.hashCode();
			anchor = "" + id;
		}
		return anchor;
	}
	
//	// Action associee a la selection du noeud 
//	public WOComponent selectNodeOld() {
//		
//		CLog.log("<< selectNode >>");
//		
//		if ( currentRecord() != null) {
//			WOComponent page = context().page();
//			if (  (page != null) && (selectionKey() != null) ) {
//				if ( selectionKey() != null)
//					page.takeValueForKey( currentRecord, selectionKey);
//			}
//			// Ouverture du noeud selectionne
//			isNodeOpen = true;
//		}
//		return null;
//	}

	/**
	 * Couleur du texte du libelle du noeud selectionne
	 */
	public String nodeSelectedTextColor() {
		String str = null;
		if ( (currentRecord() != null) && (selectionTextColor() != null) ) {
			WOComponent page = context().page();
			if (  (page != null) && (selectionKey() != null)) {
				EOGenericRecord anEog = (EOGenericRecord)page.valueForKey( selectionKey);
				if ( (anEog != null) && ( currentRecord.equals(anEog)) ) 
					str = selectionTextColor;
			}
		}
		return str;
	}
	
	
	public String getDLinkDetailCls() {
		WOComponent page = context().page();
		EOGenericRecord selectedItem = (EOGenericRecord)page.valueForKey( selectionKey);
		if(currentRecord.equals(selectedItem)) {
			return "selLine";
		}
		else
			return null;
	}
	
	
	public NSDictionary queryDictionary() {
		NSMutableDictionary dico = new NSMutableDictionary();
		dico.setObjectForKey(directory.getId(),NavigationInfos.REQ_DIRECTORY);
		dico.setObjectForKey(pathway.getId(),NavigationInfos.REQ_PATHWAY);
		dico.setObjectForKey(currentRecord.getPrimaryKey(),typeRequestItem);
		return dico;
	}
	
	public String tooltipDetail() {
		StringBuffer bf = new StringBuffer();
		bf.append("return overlib('").append(labelDetailItem()).append("');").append("\" ").append("onmouseout=").append("'return nd();'");
		return bf.toString();
	}
	public String tooltipExpand() {
		StringBuffer bf = new StringBuffer();
		bf.append("return overlib('").append(labelExpandItem()).append("');").append("\" ").append("onmouseout=").append("'return nd();'");
		
		return bf.toString();
		
	}

	public String labelDetailItem() {
		String val = ((Session)context().session()).getLocalizedString( pathway.getLStringDetails() )+" :<br/><h4>"+currentRecord.displayString()+"</h4>";
		return val.replaceAll("'", "`").replaceAll("\n","<br/>").replaceAll("\"", "`");
	}
	
	public String labelExpandItem() {
		String val = ((Session)context().session()).getLocalizedString( pathway.getLStringExpand() )+" :<br/><h4>"+currentRecord.displayString()+"</h4>";
		return val.replaceAll("'", "`").replaceAll("\n","<br/>").replaceAll("\"", "`");
	}
}