package org.cocktail.directory.server;

// Generated by the WOLips Templateengine Plug-in at 7 d�c. 2006 09:39:53

import java.net.InetAddress;
import java.net.URL;

import org.cocktail.directory.impl.Directory;
import org.cocktail.directory.impl.SearchItem;
import org.cocktail.directory.impl.pathways.Pathway;
import org.cocktail.directory.server.components.LoginPage;
import org.cocktail.directory.server.components.Main;
import org.cocktail.directory.server.components.MessagesViewer;
import org.cocktail.directory.tools.CLog;
import org.cocktail.directory.tools.DirUtilities;
import org.cocktail.fwkcktlwebapp.server.CktlDataResponse;
import org.cocktail.fwkcktlwebapp.server.CktlResourceManager;
import org.cocktail.fwkcktlwebapp.server.CktlWebAction;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOApplication;
import com.webobjects.appserver.WORedirect;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WOSessionStore;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSData;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableDictionary;

import er.extensions.appserver.ERXWOContext;

public class DirectAction extends CktlWebAction {
	
	public static final String ACTION_DISCOVER 		= "discover";
	public static final String ACTION_SEARCH 		= "search";
	public static final String ACTION_DEFAULT 		= "default";
	
	public static final String URL					= "url";
	public static final String SEARCH_STRING 		= "ss";
	
	public static final String SEARCH_ARGS 			= "sa";
	
	protected Application app = (Application)Application.application();
	
	
	private void storeDirectoryRequest(String actionName,WORequest request) {
		Session session = getSession(request);
		ERXWOContext context = (ERXWOContext)context();
		String directAction = context.directActionURLForActionNamed(actionName, request.formValues(), true);
    	session.setDirectoryRequest( directAction );
	}
	
	
	public WOActionResults versionAction() {
		MessagesViewer page = (MessagesViewer)pageWithName(MessagesViewer.class.getName());
		page.setMessageType(MessagesViewer.MSG_INFORMATION);
		
		page.setMessage( Version.completeDescription() );
		return page;
	}
	
	
	/** toute requete vers l'annuaire hormis la recherche passe par cette directAction
	 * voir les NavigationInfos.REQ_* pour les differents parametres possibles
	 **/
	public WOActionResults discoverAction() throws DirElementNotFoundException {
		
		WORequest request = request();
		Session sess = getSession(request);
		storeDirectoryRequest(ACTION_DISCOVER,request);
		manageLanguage(request);
		
		Main page = (Main)pageWithName(Main.class.getName());
		
		String dirId = (String)request.formValueForKey(NavigationInfos.REQ_DIRECTORY);
		String specificItem = (String)request.formValueForKey(NavigationInfos.REQ_SPECIFIC_ITEM);
		String pathId = (String)request.formValueForKey(NavigationInfos.REQ_PATHWAY);
		String parentItem = (String)request.formValueForKey(NavigationInfos.REQ_PARENT_ITEM);
		
		String stand = (String)request.formValueForKey(NavigationInfos.REQ_STANDALONE);
		
		if(stand!=null && stand.equals("true"))
			page.setStandalone(true);
		
		Directory directory = app.getDirectoryWithId(dirId);
		page.setDirectory(directory);
		Pathway pathway = null;
		
		if(pathId!=null) 
			pathway = directory.getPathwayWithId(pathId);
		
		 String auto = (String)request().formValueForKey(NavigationInfos.REQ_AUTOCONNECT);
		 
	     if( ( (pathway!=null && pathway.needsAuthentication()) || "1".equals(auto)) && cktlSession().connectedUserInfo()==null) {
	    	 String storedUrl = ((ERXWOContext)context()).directActionURLForActionNamed("discover",request().formValues(),true);
	    	 session().setObjectForKey( DirUtilities.unescapeHTML(storedUrl,0) ,URL);
	         return casLoginAction();
	     }
	
		sess.setDirectory(directory);
		
		if(parentItem!=null) {
			page.setTypeRequestItem(NavigationInfos.REQ_SPECIFIC_ITEM);
			page.setDisplayMode(NavigationInfos.DISPLAY_BROWSING);
		}
		
		
		// TODO : AJOUT A VERIFIER !!!
		page.setPathway(pathway);
		
		
		
		if(pathway!=null && specificItem==null) {
			page.setDisplayMode(NavigationInfos.DISPLAY_BROWSING);
			page.setPathway(pathway);
			page.setParentItem(parentItem);
		}
		else
		if(specificItem!=null) {
			page.setSpecificItem(specificItem);
			page.setDisplayMode(NavigationInfos.DISPLAY_DETAILS);
		}
		
		// Directory start
		if(directory!=null && pathway!=null && parentItem==null && specificItem==null) {
			page.prepareBrowsableItems();
		}
		
		// verification des droits sur les annuaires : retour page d'erreur ou page de contenu
		if(pathway!=null && !sess.canViewResults(directory)) {
			MessagesViewer msg = (MessagesViewer)pageWithName(MessagesViewer.class.getName());
			msg.setMessageType( MessagesViewer.MSG_ERROR );
			msg.setMessage( sess.getLocalizedString("TInsufficientPrivilegesDir") );
			return msg;
		}
		else {
			page.manageNavigationBar();
			return page;
		}
	}


	public WOActionResults changeLangAction() {
		manageLanguage(request());
		WORedirect page = (WORedirect)pageWithName(WORedirect.class.getName());
		String url = getSession(request()).getDirectoryRequest();
		page.setUrl(url);
        return page;
	}
	
    public WOActionResults searchAction() {
    	
    	
		WORequest request = request();
		WORequest req = context().request();
    	String ipAddr = ipAddressFromRequest(req);

    	Session session = (Session)session();
    	
    	long waitMinutes = app.addUserHit(ipAddr);
    	
    	
		if( session.connectedUserInfo()==null && waitMinutes > 0 ) {
			MessagesViewer page = (MessagesViewer)pageWithName(MessagesViewer.class.getName());
			String message = session.getLocalizedString("ErrWaitBeforeSearch");
			message = message.replaceFirst("%NB%", String.valueOf(waitMinutes));
			page.setMessage(message);
			page.setMessageType( MessagesViewer.MSG_ERROR );
			return page;
		}
		
		Main page = (Main)pageWithName(Main.class.getName());
		
		storeDirectoryRequest(ACTION_SEARCH,request);
    	manageLanguage(request);
		
		String directoryId = request.stringFormValueForKey(NavigationInfos.REQ_DIRECTORY);
		String pathId = request.stringFormValueForKey(NavigationInfos.REQ_PATHWAY);
		
		Directory directory = app.getDirectoryWithId(directoryId);
		
		NSMutableDictionary searchArgs = new NSMutableDictionary();
		NSArray searchItems = directory.getSearchItems();
		
		String currentField,currentFieldVal;
		SearchItem item;
		for(int i=0;i<searchItems.count();i++) {
			item = (SearchItem)searchItems.objectAtIndex(i);
			currentField= item.inputName();
			currentFieldVal = request.stringFormValueForKey(currentField);
			if(item.isRemoveAccents())
				currentFieldVal = DirUtilities.removeAccentsForString(currentFieldVal);
			
			if(currentFieldVal!=null && !currentFieldVal.equals("*")) {
				// si la recherche pour ce champs va s'effectuer sur une seule colonne de la base de donn�e
				if(item.searchColumn()!=null)
					searchArgs.setObjectForKey(currentFieldVal,item.searchColumn());
				// sinon sur plusieurs, exemple : dupont sur nom_usuel et nom_patronymique
				else
					searchArgs.setObjectForKey(currentFieldVal,item.searchColumns());
			}
		}

		if(searchArgs.count()==0)
			return page;
		
		page.setDirectory(directory);
		if(directory!=null) {
			Pathway pathway = directory.getPathwayWithId(pathId);
			page.setPathway(pathway);
		} 
		else {
			CLog.log("searchAction : directory=null !");			
		}
		
		NSMutableDictionary dico = new NSMutableDictionary();
		
		if(directoryId!=null)
			dico.setObjectForKey(directoryId,NavigationInfos.REQ_DIRECTORY);
		
		if(pathId!=null)
			dico.setObjectForKey(pathId,NavigationInfos.REQ_PATHWAY);
			
		//dico.setObjectForKey(searchString,SEARCH_STRING);
		dico.setObjectForKey(searchArgs,SEARCH_ARGS);
		
		page.setSearchSimpleSearchParameters(dico);
		
		page.setDisplayMode(NavigationInfos.DISPLAY_SIMPLE_SEARCH);
		
		return page;
	}
    
    
    public WOActionResults advsearchAction() {
    	
    	Main page = (Main)pageWithName(Main.class.getName());
		WORequest request = request();

		String directoryId = request.stringFormValueForKey(NavigationInfos.REQ_DIRECTORY);
		String pathId = request.stringFormValueForKey(NavigationInfos.REQ_PATHWAY);
		String grhumFunction = request.stringFormValueForKey(NavigationInfos.PAR_GRHUM_FUNCTION);
		return page;
    }
    
    
    
    
    
	public DirectAction(WORequest aRequest) {
        super(aRequest);
    }
    
    private void manageLanguage(WORequest request) {
    	String lang = (String)request.formValueForKey(NavigationInfos.REQ_LANGUAGE);
    	Session sess = getSession(request);
    	sess.manageLanguages(lang);
    }
    
    
    private Session getSession(WORequest request) {
    	Session sess = null;
    	
    	if(request!=null) {
    		String sessId = request.sessionID();
    		if(sessId!=null) {
    			WOSessionStore sessionStore = WOApplication.application().sessionStore();
    			sess = (Session)sessionStore.restoreSessionWithID(sessId, null);
    		}
    	}
   
    	if(sess==null)
    		sess = (Session)session();
    	
    	return sess;
    }
    
    public WOActionResults defaultAction() {
    	
    	
    	Main page = (Main)pageWithName(Main.class.getName());
    	WORequest request = request();
    	storeDirectoryRequest(ACTION_DEFAULT,request);
    	manageLanguage(request);
    	page.manageNavigationBar();
    	return page;
    }
 
    
    private String ipAddressFromRequest(WORequest request) {
    	String host = null;
		if (WOApplication.application().isDirectConnectEnabled()) {
		    InetAddress hostAdd = request._originatingAddress();
		    if (hostAdd != null) {
		        host = hostAdd.getHostAddress();
		        return host;
		    }
		}
		if (host == null) {
		    host = request.headerForKey("remote_host");
		    if (host != null) return host;
		
		    host= request.headerForKey("remote_addr");
		    if (host != null) return host;
		
		    host = request.headerForKey("remote_user");
		    if (host != null) return host;
		
		    host = request.headerForKey("x-webobjects-remote-addr");
		    if (host != null) return host;
		}
		return "UNKNOWN";
    }
    
    public WOActionResults photoEtudiantIndividuAction() {

    	WORequest aRequest = this.request();
        CktlDataResponse myResp = new CktlDataResponse();
        
        CktlResourceManager resBundle = app.appResources();
        
        URL photoVide=null;
        NSData laPhoto=null;
        String id = aRequest.stringFormValueForKey("noIndividu");
		
		
        Number noIndividu = (Number)new Integer(id);
        EOEditingContext ec = new EOEditingContext();
        
			if (noIndividu!=null) {
				EOQualifier myQualifier = EOQualifier.qualifierWithQualifierFormat("noIndividu = %@ and individuUlr.indPhoto='O'", new NSArray(noIndividu));
				EOFetchSpecification myFetch = new EOFetchSpecification("PhotosEtudiantsGrhum",myQualifier, null);
				NSArray myResult = ec.objectsWithFetchSpecification(myFetch);
            
				if(myResult.count() >0 ) {
					if ( myResult.valueForKey("datasPhoto") != null ) {
						laPhoto = (NSData)((EOGenericRecord)myResult.objectAtIndex(0)).valueForKey("datasPhoto");
					}
				}
			}
        
        // pas de photo on met l'image "aucune photo"
        if(laPhoto==null) {
        	try {
                photoVide = new URL("file:///" + resBundle.pathForResource("no_photo.gif"));
                laPhoto = new NSData(photoVide);
            }
            catch(Exception e) { e.printStackTrace(); }
        }
        //On construit la reponse
        myResp.setContent(laPhoto,"image/jpeg");
        return myResp ;
      }

    public WOActionResults loginCasFailurePage(String arg0, String arg1) {
		return null;
	}

    
    
	public WOActionResults loginCasSuccessPage(String arg0) {
		CLog.log(">> loginCasSuccessPage");
		CLog.log(arg0);
        cktlSession().setConnectedUser(arg0);
        if(cktlSession().connectedUserInfo().hasError()) {
        	CLog.log("Erreur de compte : Une erreur s'est produit lors de l'initialisation du compte");
        	return null;
        }
        if(cktlSession().objectForKey(URL)!=null) {
            WORedirect page = (WORedirect)pageWithName(WORedirect.class.getName());
            page.setUrl((String)cktlSession().objectForKey(URL));
            return page;
        }
        else {
        	return casLoginAction();
        }
	}

	public WOActionResults loginNoCasPage() {
		return null;
	}
	
	public WOActionResults loginCasSuccessPage(String netId, NSDictionary params) {
		return loginCasSuccessPage(netId);
	}


	public WOActionResults loginNoCasPage(NSDictionary arg0) {
    	LoginPage page = (LoginPage)pageWithName(LoginPage.class.getName());
    	return page;
	}
    
    
}