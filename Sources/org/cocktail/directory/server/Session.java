package org.cocktail.directory.server;

// Generated by the WOLips Templateengine Plug-in at 7 dï¿½c. 2006 09:39:53

import org.cocktail.directory.eof.server.EOIndividuUlr;
import org.cocktail.directory.eof.server.EOVAgentFournisseur;
import org.cocktail.directory.eof.server.EOVDroitsAnnuaireWeb;
import org.cocktail.directory.impl.Directory;
import org.cocktail.directory.tools.CLog;
import org.cocktail.directory.tools.DirUtilities;
import org.cocktail.directory.tools.LocaleRepresentation;
import org.cocktail.fwkcktlajaxwebext.serveur.CocktailAjaxSession;
import org.cocktail.fwkcktlwebapp.common.CktlUserInfo;

import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSTimestamp;

import er.extensions.localization.ERXLocalizer;

@SuppressWarnings("serial")
public class Session extends CocktailAjaxSession {

	protected final Application app = (Application) Application.application();

	public NavigationInfos navInfosHolder;
	// private LocalizedStringsManager localizedStrings;

	private ERXLocalizer localizedStrings;

	protected String currentLocale = null;

	private String directoryRequest;
	private Directory directory;

	private EOIndividuUlr connectedIndividu;

	public Session() {
		super();
		// setStoresIDsInCookies(true);
		// setStoresIDsInURLs(false);
		makeExtraInits();

	}

	public void firstTimeInitLocale() {
		if (navInfosHolder.selectedLocale == null) {
			String currentLang = (String) languages().objectAtIndex(0);
			LocaleRepresentation localRep;
			for (int i = 0; i < app.listLocales.count(); i++) {
				localRep = app.listLocales.objectAtIndex(0);
				if (localRep.getValue().equals(currentLang)) {
					navInfosHolder.selectedLocale = localRep;
					break;
				}
			}
		}
	}

	private void makeExtraInits() {
		navInfosHolder = new NavigationInfos();
		NavigationPath defaultPath = new NavigationPath("LHome", new Integer(0), "default", new NSDictionary());
		defaultPath.setSpecificClass("home");
		navInfosHolder.addToListPaths(defaultPath);
	}

	/*
	 * public void manageLanguages(String lang) {
	 * 
	 * String locale = null; if(lang==null) { if(getLocalizedStrings()==null) createLocalStringsManager(null); return; }
	 * 
	 * locale = lang;
	 * 
	 * if(locale!=null) createLocalStringsManager(locale); }
	 * 
	 * 
	 * 
	 * public void createLocalStringsManager(String aLocale) {
	 * 
	 * NSMutableArray langs = languages().mutableClone(); // cas ou l'utilisateur a exlicitement choisi une langue if(aLocale!=null) {
	 * if(langs.containsObject(aLocale)) { langs.removeIdenticalObject(aLocale); } langs.insertObjectAtIndex(aLocale,0); }
	 * setLanguages(langs); localizedStrings = new LocalizedStringsManager("Directory","Directory",app.resourceManager(),langs);
	 * 
	 * }
	 * 
	 * 
	 * 
	 * 
	 * 
	 * public String getLocalizedString(String str) { return (String)localizedStrings.valueForKey(str); }
	 * 
	 * public LocalizedStringsManager getLocalizedStrings() { return localizedStrings; }
	 * 
	 * public void setLocalizedStrings(LocalizedStringsManager localizedStrings) { this.localizedStrings = localizedStrings; }
	 */

	// / VERSION WONDER ////
	public void manageLanguages(String lang) {

		String locale = null;
		if (lang == null) {
			if (getLocalizedStrings() == null) {
				createLocalStringsManager(null);
			}
			return;
		}

		locale = lang;

		if (locale != null) {
			createLocalStringsManager(locale);
		}
	}

	public void createLocalStringsManager(String aLocale) {

		NSMutableArray<String> langs = languages().mutableClone();
		// cas ou l'utilisateur a exlicitement choisi une langue
		String myLocale = null;

		if (aLocale == null) {
			myLocale = langs.objectAtIndex(0);
		}
		else {
			myLocale = aLocale;
		}

		if (LocaleRepresentation.isCountryIndicated(myLocale)) {
			LocaleRepresentation lr = app.getMatchingLocale(myLocale);
			myLocale = lr.getValue();
		}

		if (myLocale != null) {
			if (langs.containsObject(myLocale)) {
				langs.removeIdenticalObject(myLocale);
			}
			langs.insertObjectAtIndex(myLocale, 0);
		}
		setLanguages(langs);
		localizedStrings = new ERXLocalizer(langs.objectAtIndex(0));
	}

	public String getLocalizedString(String str) {
		return (String) localizedStrings.valueForKey(str);
	}

	public ERXLocalizer getLocalizedStrings() {
		return localizedStrings;
	}

	public void setLocalizedStrings(ERXLocalizer localizedStrings) {
		this.localizedStrings = localizedStrings;
	}

	// / FIN VERSION WONDER DU LOCALIZER ///

	public String appTitle() {
		return getLocalizedString("AppTitle");
	}

	public Directory getDirectory() {
		return directory;
	}

	public void setDirectory(Directory directory) {
		this.directory = directory;
	}

	public String getDirectoryRequest() {
		String resp = directoryRequest;
		resp = DirUtilities.replacePart(resp, "&amp;", "&");
		return resp;
	}

	public void setDirectoryRequest(String directoryRequest) {
		this.directoryRequest = directoryRequest;
	}

	public String setConnectedUser(String userLogin) {
		String retour = super.setConnectedUser(userLogin);
		CktlUserInfo userInfos = connectedUserInfo();
		if (userInfos != null) {
			connectedIndividu = (EOIndividuUlr) DirUtilities.fetchUniqueData(defaultEditingContext(), "IndividuUlr", "noIndividu",
					userInfos.noIndividu());
		}
		else {
			connectedIndividu = null;
		}

		return retour;
	}

	public EOIndividuUlr connectedIndividu() {
		return connectedIndividu;
	}

	public void setConnectedIndividu(EOIndividuUlr connectedIndividu) {
		this.connectedIndividu = connectedIndividu;
	}

	public boolean userCanViewConventions() {
		boolean result;
		if (connectedIndividu() == null) {
			result = false;
		}
		else {
			String droit = app.configValue("JEFYADMIN_DROIT_CONVENTIONS");
			EOQualifier qualConv = EOQualifier.qualifierWithQualifierFormat("persId=%@ and fonIdInterne=%@", new NSArray(new Object[] {
					connectedIndividu().persId(), droit }));

			NSArray data = DirUtilities.fetchData(defaultEditingContext(), EOVDroitsAnnuaireWeb.EntityName, qualConv);
			CLog.log("userCanViewConventions : " + data);
			if (data.count() > 0) {
				result = true;
			}
			else {
				result = false;
			}
		}
		return result;
	}

	// UP : 29/02/2007 On se base sur JefyAdmin maintenant.

	public boolean userCanViewPartners() {

		boolean result;
		if (connectedIndividu() == null) {
			result = false;
		}
		else {
			String droit = app.configValue("JEFYADMIN_DROIT_FOURNIS");
			EOQualifier qualConv = EOQualifier.qualifierWithQualifierFormat("persId=%@ and fonIdInterne=%@", new NSArray(new Object[] {
					connectedIndividu().persId(), droit }));

			NSArray data = DirUtilities.fetchData(defaultEditingContext(), EOVDroitsAnnuaireWeb.EntityName, qualConv);
			CLog.log("userCanViewPartners : " + data);
			if (data.count() > 0) {
				result = true;
			}
			else {
				result = false;
			}
		}
		return result;
	}

	public boolean userCanViewPartnersOld() {

		boolean result;
		if (connectedIndividu() == null) {
			result = false;
		}
		else {
			String droit = app.configValue("JEFYADMIN_DROIT_FOURNIS");

			if (droit == null) {
				return false;
			}

			StringBuffer stringQualifier = new StringBuffer("agtLogin=%@ and ").append(droit).append("='1'");
			stringQualifier.append(" and (utlFermeture = nil or utlFermeture > %@)");
			stringQualifier.append(" and (utlOuverture <= %@)");

			NSTimestamp now = new NSTimestamp();

			EOQualifier qualFour = EOQualifier.qualifierWithQualifierFormat(stringQualifier.toString(), new NSArray(new Object[] {
					connectedIndividu().login(), now, now }));
			NSArray<EOVAgentFournisseur> data = DirUtilities.fetchData(defaultEditingContext(), EOVAgentFournisseur.EntityName, qualFour);
			if (data.count() > 0) {
				result = true;
			}
			else {
				result = false;
			}
		}
		return result;
	}

	public boolean userCanViewGroups() {

		EOIndividuUlr user = connectedIndividu();

		boolean canView = false;

		if (user == null) {
			canView = false;
		}
		else {
			canView = user.canViewListeRouge();
		}

		return canView;
	}

	public boolean canViewResults(Directory dir) {

		String dirId = dir.getId();
		boolean canView;

		if (dirId.equals(CommonDataHolder.DIR_CONVENTIONS)) {
			canView = userCanViewConventions();
		}
		else
			if (dirId.equals(CommonDataHolder.DIR_SUPPLIERS)) {
				canView = userCanViewPartners();
			}
			else
				if (dirId.equals(CommonDataHolder.DIR_GROUPS)) {
					canView = userCanViewGroups();
				}
				else {
					canView = true;
				}

		return canView;
	}

}